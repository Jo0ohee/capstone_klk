import sys
import pymysql
import pandas as pd
from datetime import timedelta

if len(sys.argv) != 3:
    print("Usage: python date_operator_db.py <start_date> <end_date>")
    sys.exit(1)

date1 = pd.to_datetime(sys.argv[1])
date2 = pd.to_datetime(sys.argv[2])
date2 = date2 + pd.Timedelta(hours=23, minutes=59, seconds=59)

print(f"Start Date: {date1}")
print(f"End Date: {date2}")

conn = pymysql.connect(
    host='localhost',
    user='root',
    password='1234',
    db='smartfactorydb',
    charset='utf8'
)

query = "SELECT * FROM eventTBL"
data_sql = pd.read_sql(query, conn)

query1 = "SELECT OPERATOR_ID FROM operatorTBL"
operator_ids_sql = pd.read_sql(query1, conn)
operator_ids = operator_ids_sql['OPERATOR_ID'].tolist()

data = data_sql[(data_sql['TIME'] >= date1) & (data_sql['TIME'] <= date2)]
data['TIME'] = pd.to_datetime(data['TIME'])

standard_time_map = {
    ("ASM02", "BP60010"): 30,
    ("ASM02", "BP60011"): 35,
    ("ASM02", "BP60012"): 32,
    ("BLW01", "BP60010"): 20,
    ("BLW01", "BP60011"): 25,
    ("BLW01", "BP60012"): 22,
    ("PNT03", "BP60010"): 35,
    ("PNT03", "BP60011"): 33,
    ("PNT03", "BP60012"): 36,
}

standard_st = {
    'BLW01': 67,
    'ASM02': 97,
    'PNT03': 104
}

results = {operator_id: {
    'total_working_time' : 0,
    'productive_time' : 0,
    'input' : 0,
    'fail' : 0,
    'performance' : 0,
    'efficiency' : 0
} for operator_id in operator_ids}

def calculate_total_working_time_for_operators(data, operator_ids, results):
    for operator_id in operator_ids:
        filtered_df = data[data['ID'] == operator_id].copy()
        filtered_df['DATE'] = filtered_df['TIME'].dt.date
        work_days = filtered_df['DATE'].nunique()
        total_seconds = work_days * 9 * 60 * 60
        results[operator_id]['total_working_time'] = total_seconds
calculate_total_working_time_for_operators(data, operator_ids, results)

def calculate_productive_time(data, operator_ids, standard_time_map, results):
    for operator_id in operator_ids:
        op_data = data[data["ID"] == operator_id].copy()
        op_data["TIME"] = pd.to_datetime(op_data["TIME"])
        op_data = op_data.sort_values(by="TIME")
        grouped = op_data.groupby(["PROCESS", "CODE"])

        total_runtime = timedelta()
        total_loss = timedelta()
        for (process, code), group_data in grouped:
            run_start_time = None
            group_runtime = timedelta()
            group_loss = timedelta()
            stop_detected = False

            for _, row in group_data.iterrows():
                if row["TYPE"] == "RUN":
                    if run_start_time is None:
                        run_start_time = row["TIME"]
                        stop_detected = False
                    elif run_start_time is not None and not stop_detected:
                        loss_start_time = row["TIME"]
                        group_loss += loss_start_time - run_start_time
                elif row["TYPE"] == "STOP":
                    if run_start_time is not None and not stop_detected:
                        elapsed_time = row["TIME"] - run_start_time
                        if elapsed_time > timedelta(hours=24):
                            standard_time = standard_time_map.get((process, code), 0)
                            group_runtime += timedelta(minutes=standard_time)
                        else:
                            group_runtime += elapsed_time
                        run_start_time = None
                        stop_detected = True

            if run_start_time is not None:
                standard_time = standard_time_map.get((process, code), 0)
                group_runtime += timedelta(minutes=standard_time)

            total_runtime += group_runtime
            total_loss += group_loss

        results[operator_id]['productive_time'] = int(total_runtime.total_seconds())
calculate_productive_time(data, operator_ids, standard_time_map, results)

def calculate_operator_metrics(data, operator_ids, results, standard_st):
    for operator_id in operator_ids:
        operator_data = data[data['ID'] == operator_id]
        if operator_data.empty:
            continue

        total_input_quantity = 0
        total_defect_quantity = 0
        standard_labor = 0

        for serial, group in operator_data.groupby('SERIAL'):
            for process, process_group in group.groupby('PROCESS'):
                true_count = 0
                false_count = 0
                stop_found = False

                for _, row in process_group.iterrows():
                    row_type = row['TYPE']
                    pass_value = row['PASS']

                    if row_type == 'STOP' and not stop_found:
                        if pass_value == 'TRUE':
                            true_count += 1
                        elif pass_value == 'FALSE':
                            false_count += 1
                        stop_found = True

                if not stop_found:
                    true_count += 1

                total_input_quantity += true_count + false_count
                total_defect_quantity += false_count

                if process in standard_st:
                    total_count = true_count + false_count
                    standard_labor += total_count * standard_st[process]

        total_working_time = results[operator_id].get('total_working_time', 0)
        if total_working_time > 0:
            work_efficiency = standard_labor / total_working_time * 100
        else:
            work_efficiency = None

        results[operator_id]['input'] = total_input_quantity
        results[operator_id]['fail'] = total_defect_quantity
        results[operator_id]['efficiency'] = work_efficiency
calculate_operator_metrics(data, operator_ids, results, standard_st)

def calculate_performance_time(df, standard_time_map):
    for operator_id in operator_ids:
        operator_data = df[df['ID'] == operator_id]
        performance_time = 0

        grouped = operator_data.groupby('SERIAL')

        for serial, group in grouped:
            run_stops = group.sort_values('TIME')
            stop_rows = run_stops[run_stops['TYPE'] == 'STOP']
            run_rows = run_stops[run_stops['TYPE'] == 'RUN']

            matched_stops = set()
            if not stop_rows.empty and not run_rows.empty:
                for _, stop_row in stop_rows.iterrows():
                    process = stop_row['PROCESS']
                    code = stop_row['CODE']
                    if (process, code) in standard_time_map:
                        performance_time += standard_time_map[(process, code)]
                        matched_stops.add(stop_row['PROCESS'])

            unmatched_stops = stop_rows[~stop_rows['PROCESS'].isin(matched_stops)]
            if not unmatched_stops.empty:
                for _, stop_row in unmatched_stops.iterrows():
                    process = stop_row['PROCESS']
                    code = stop_row['CODE']
                    if (process, code) in standard_time_map:
                        performance_time += standard_time_map[(process, code)]

            unmatched_runs = run_rows[~run_rows['PROCESS'].isin(matched_stops)]
            if not unmatched_runs.empty:
                for _, run_row in unmatched_runs.iterrows():
                    process = run_row['PROCESS']
                    code = run_row['CODE']
                    if (process, code) in standard_time_map:
                        performance_time += standard_time_map[(process, code)]

        results[operator_id]['performance'] = performance_time
calculate_performance_time(data, standard_time_map)

cursor = conn.cursor()

query = """
UPDATE operatorTBL
SET 
    OPERATOR_TOTAL_WORKING_TIME = %s,
    OPERATOR_TOTAL_PRODUCTIVE_TIME = %s,
    OPERATOR_TOTAL_INPUT = %s,
    OPERATOR_TOTAL_FAIL = %s,
    OPERATOR_PERFORMANCE = %s,
    OPERATOR_EFFICIENCY = %s
WHERE OPERATOR_ID = %s
"""

for operator_id, data in results.items():
    values = (
        data['total_working_time'],
        data['productive_time'],
        data['input'],
        data['fail'],
        data['performance'],
        data['efficiency'],
        operator_id
    )
    cursor.execute(query, values)

conn.commit()
cursor.close()
conn.close()

print("Database update complete.")

for operator_id, result in results.items():
    print(f"{operator_id}: {result}")
