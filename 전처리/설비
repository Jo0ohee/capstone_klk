import sys
import mysql.connector
import pandas as pd
from datetime import timedelta, datetime

conn = mysql.connector.connect(
    host='localhost',
    user='root',
    password='1234',
    database='smartfactorydb'
)

if len(sys.argv) != 3:
    print("Usage: python date_operator_db.py <start_date> <end_date>")
    sys.exit(1)

date1 = pd.to_datetime(sys.argv[1])
date2 = pd.to_datetime(sys.argv[2])

date2 = date2 + pd.Timedelta(hours=23, minutes=59, seconds=59)

print(f"Start Date: {date1}")
print(f"End Date: {date2}")

cursor = conn.cursor()

query = "SELECT * FROM eventTBL"
data_sql = pd.read_sql(query, conn)

query1 = "SELECT MACHINE_ID FROM machineTBL"
machine_ids_sql = pd.read_sql(query1, conn)

data_2024 = data_sql[(data_sql['TIME'] >= date1) & (data_sql['TIME'] <= date2)]
machine_ids = machine_ids_sql['MACHINE_ID'].tolist()

data_2024['TIME'] = pd.to_datetime(data_2024['TIME'])

results = { machine_id: {
        'MACHINE_TOTAL_WORKING_TIME': 0,
        'MACHINE_TOTAL_PRODUCTIVE_TIME': 0,
        'MACHINE_TOTAL_INPUT': 0,
        'MACHINE_TOTAL_FAIL': 0,
        'MACHINE_PERFORMANCE': 0,
        'MACHINE_EFFICIENCY': 0,
        'MACHINE_REAL_PRODUCTIVE_TIME': 0,
        'MACHINE_VALUE_PRODUCTIVE_TIME': 0,
        'COMPLETE_COUNT': 0,
        'PASS_COUNT': 0
    } for machine_id in machine_ids}

cycle_times = {
    ('BP60010', 'BLW01'): 40,
    ('BP60010', 'ASM02'): 45,
    ('BP60010', 'PNT03'): 50,
    ('BP60011', 'BLW01'): 42,
    ('BP60011', 'ASM02'): 46,
    ('BP60011', 'PNT03'): 41,
    ('BP60012', 'BLW01'): 44,
    ('BP60012', 'ASM02'): 48,
    ('BP60012', 'PNT03'): 43
}

working_days = data_2024.groupby('ID')['TIME'].apply(lambda x: x.dt.date.nunique())
for machine_id, days in working_days.items():
    if machine_id in results:  
        results[machine_id]['MACHINE_TOTAL_WORKING_TIME'] = days * 9 * 3600 

def calculate_total_productive_time(group):
    total_productive_seconds = 0  
    run_stop_pairs = []

    for serial, serial_group in group.groupby('SERIAL'):
        for (process, code), process_group in serial_group.groupby(['PROCESS', 'CODE']):
            process_group = process_group.sort_values(by='TIME').reset_index(drop=True)
            
            run_times = process_group.loc[process_group['TYPE'] == 'RUN', 'TIME'].reset_index(drop=True)
            stop_times = process_group.loc[process_group['TYPE'] == 'STOP', 'TIME'].reset_index(drop=True)

            run_index = 0
            stop_index = 0
            while run_index < len(run_times) or stop_index < len(stop_times):
                if run_index < len(run_times) and stop_index < len(stop_times):
                    run_time = run_times.iloc[run_index]
                    stop_time = stop_times.iloc[stop_index]
                    if run_time < stop_time:
                        productive_seconds = (stop_time - run_time).total_seconds()
                        total_productive_seconds += productive_seconds
                        run_stop_pairs.append((run_time, stop_time, productive_seconds))
                        run_index += 1
                        stop_index += 1
                elif run_index < len(run_times):
                    ct = cycle_times.get((code, process), 0)
                    stop_time = run_times.iloc[run_index] + pd.Timedelta(minutes=ct)
                    productive_seconds = ct * 60
                    total_productive_seconds += productive_seconds
                    run_stop_pairs.append((run_times.iloc[run_index], stop_time, productive_seconds))
                    run_index += 1
                elif stop_index < len(stop_times):
                    ct = cycle_times.get((code, process), 0)
                    run_time = stop_times.iloc[stop_index] - pd.Timedelta(minutes=ct)
                    productive_seconds = ct * 60
                    total_productive_seconds += productive_seconds
                    run_stop_pairs.append((run_time, stop_times.iloc[stop_index], productive_seconds))
                    stop_index += 1

    return total_productive_seconds, run_stop_pairs

machine_ids = data_2024['ID'].unique()
total_productive_info = data_2024.groupby('ID').apply(calculate_total_productive_time)

for machine_id, (total_productive_seconds, _) in total_productive_info.items():
    if machine_id in results:
        results[machine_id]['MACHINE_TOTAL_PRODUCTIVE_TIME'] = total_productive_seconds

machine_results = {}

for machine_id in machine_ids:
    machine_data = data_2024[data_2024['ID'] == machine_id]
    machine_results[machine_id] = {'TOTAL': {}}

    for serial, group in machine_data.groupby('SERIAL'):
        
        for process, process_group in group.groupby('PROCESS'):
            if process not in machine_results[machine_id]['TOTAL']:
                machine_results[machine_id]['TOTAL'][process] = {'TRUE': 0, 'FALSE': 0}
                
            stop_found = False

            for _, row in process_group.iterrows():
                row_type = row['TYPE']
                pass_value = row['PASS']
                
                if row_type == 'STOP' and not stop_found:
                    if pass_value == 'TRUE':
                        machine_results[machine_id]['TOTAL'][process]['TRUE'] += 1
                    elif pass_value == 'FALSE':
                        machine_results[machine_id]['TOTAL'][process]['FALSE'] += 1
                    stop_found = True 
                
            if not stop_found:
                machine_results[machine_id]['TOTAL'][process]['TRUE'] += 1

for machine_id, result in machine_results.items():
    if machine_id not in results:
        continue 

    total_input_quantity = 0 
    total_defect_quantity = 0 

    for process, counts in result['TOTAL'].items():
        true_count = counts['TRUE']
        false_count = counts['FALSE']
        total_input_quantity += true_count + false_count
        total_defect_quantity += false_count

    results[machine_id]['MACHINE_TOTAL_INPUT'] = total_input_quantity
    results[machine_id]['MACHINE_TOTAL_FAIL'] = total_defect_quantity

def calculate_counts(group):
    complete_count = 0
    pass_count = 0

    for serial, serial_group in group.groupby('SERIAL'):
        processes = serial_group.groupby('PROCESS')['PASS'].last()

        if all(proc in processes for proc in ['BLW01', 'ASM02', 'PNT03']):
            complete_count += 1
            pnt03_pass = processes.get('PNT03')

            if (
                pd.isna(pnt03_pass) 
                or pnt03_pass is None 
                or str(pnt03_pass).strip().upper() == 'TRUE'
                or str(pnt03_pass).strip() == ''
            ):
                pass_count += 1

    return complete_count, pass_count

counts_info = data_2024.groupby('ID').apply(calculate_counts)

for machine_id in results.keys():
    complete_count, pass_count = calculate_counts(data_2024[data_2024['ID'] == machine_id])
    results[machine_id]['COMPLETE_COUNT'] = complete_count
    results[machine_id]['PASS_COUNT'] = pass_count

def calculate_real_productive_time(group, cycle_times):
    total_real_productive_seconds = 0  

    for serial, serial_group in group.groupby('SERIAL'):
        processes = serial_group['PROCESS'].unique() 

        if all(proc in processes for proc in ['BLW01', 'ASM02', 'PNT03']):
            for (process, code), process_group in serial_group.groupby(['PROCESS', 'CODE']):
                process_group = process_group.sort_values(by='TIME').reset_index(drop=True) 

                run_times = process_group.loc[process_group['TYPE'] == 'RUN', 'TIME'].reset_index(drop=True)
                stop_times = process_group.loc[process_group['TYPE'] == 'STOP', 'TIME'].reset_index(drop=True)

                run_index, stop_index = 0, 0 

                while run_index < len(run_times) or stop_index < len(stop_times):
                    if run_index < len(run_times) and stop_index < len(stop_times): 
                        run_time = run_times.iloc[run_index] 
                        stop_time = stop_times.iloc[stop_index] 

                        if run_time < stop_time:
                            total_real_productive_seconds += (stop_time - run_time).total_seconds()
                            run_index += 1  
                            stop_index += 1  
                        else:
                            ct = cycle_times.get((code, process), 0)  
                            total_real_productive_seconds += ct * 60  
                            run_index += 1 
                    elif run_index < len(run_times): 
                        ct = cycle_times.get((code, process), 0) 
                        total_real_productive_seconds += ct * 60 
                        run_index += 1 
                    elif stop_index < len(stop_times): 
                        ct = cycle_times.get((code, process), 0) 
                        total_real_productive_seconds += ct * 60  
                        stop_index += 1  

    return total_real_productive_seconds 

for machine_id in results.keys():
    real_productive_time = calculate_real_productive_time(
        data_2024[data_2024['ID'] == machine_id],
        cycle_times
    )
    results[machine_id]['MACHINE_REAL_PRODUCTIVE_TIME'] = real_productive_time

def calculate_product_ct(data_2024, cycle_times):
    production_counts = {}
    for product in ['BP60010', 'BP60011', 'BP60012']:
        completed_serials = data_2024[
            (data_2024['CODE'] == product) & 
            (data_2024['PROCESS'].isin(['BLW01', 'ASM02', 'PNT03']))
        ]['SERIAL'].unique()
        production_counts[product] = len(completed_serials)
    
    total_performance_time = 0
    for product, count in production_counts.items():
        product_ct = sum([cycle_times.get((product, process), 0) for process in ['BLW01', 'ASM02', 'PNT03']])
        total_performance_time += product_ct * count
    
    return total_performance_time

for machine_id in results.keys():
    performance_time = calculate_product_ct(
        data_2024[data_2024['ID'] == machine_id], 
        cycle_times
    )
    results[machine_id]['MACHINE_PERFORMANCE'] = performance_time

def calculate_value_ct(data_2024, cycle_times):
    production_counts = {}
    for product in ['BP60010', 'BP60011', 'BP60012']:
        completed_serials = data_2024[
            (data_2024['CODE'] == product) & 
            (data_2024['PROCESS'].isin(['BLW01', 'ASM02', 'PNT03']))
        ]
        
        valid_serials = completed_serials.groupby('SERIAL').filter(
            lambda x: set(['BLW01', 'ASM02', 'PNT03']).issubset(x['PROCESS'].unique()) and 
                      (x[x['PROCESS'] == 'PNT03']['PASS'] == "TRUE").any()
        )['SERIAL'].unique()
        
        production_counts[product] = len(valid_serials)
    
    total_value_time = 0
    for product, count in production_counts.items():
        product_ct = sum([cycle_times.get((product, process), 0) for process in ['BLW01', 'ASM02', 'PNT03']])
        total_value_time += product_ct * count
    
    return total_value_time

for machine_id in results.keys():
    value_productive_time = calculate_value_ct(
        data_2024[data_2024['ID'] == machine_id],  
        cycle_times
    )
    results[machine_id]['MACHINE_VALUE_PRODUCTIVE_TIME'] = value_productive_time


for machine_id in results.keys():
    total_working_time = results[machine_id].get('MACHINE_TOTAL_WORKING_TIME', 0)
    total_productive_time = results[machine_id].get('MACHINE_TOTAL_PRODUCTIVE_TIME', 0)
    performance = results[machine_id].get('MACHINE_PERFORMANCE', 0)
    complete_count = results[machine_id].get('COMPLETE_COUNT', 0)
    pass_count = results[machine_id].get('PASS_COUNT', 0)

    if total_working_time > 0:
        time_availability = (total_productive_time / total_working_time) * 100
    else:
        time_availability = 0

    if total_productive_time > 0:
        performance_availability = (performance / total_productive_time) * 100
    else:
        performance_availability = 0

    if complete_count > 0:
        quality_rate = (pass_count / complete_count) * 100
    else:
        quality_rate = 0

    machine_efficiency = (time_availability * performance_availability * quality_rate) / 10000

    results[machine_id]['MACHINE_EFFICIENCY'] = machine_efficiency

update_query = """
    UPDATE machinetbl
    SET MACHINE_TOTAL_WORKING_TIME = %s,
        MACHINE_TOTAL_PRODUCTIVE_TIME = %s,
        MACHINE_TOTAL_INPUT = %s,
        MACHINE_TOTAL_FAIL = %s,
        MACHINE_PERFORMANCE = %s,
        MACHINE_EFFICIENCY = %s,
        MACHINE_REAL_PRODUCTIVE_TIME = %s,
        MACHINE_VALUE_PRODUCTIVE_TIME = %s
    WHERE MACHINE_ID = %s
"""

for machine_id, data in results.items():
    values = (
        data['MACHINE_TOTAL_WORKING_TIME'],
        data['MACHINE_TOTAL_PRODUCTIVE_TIME'],
        data['MACHINE_TOTAL_INPUT'],
        data['MACHINE_TOTAL_FAIL'],
        data['MACHINE_PERFORMANCE'],
        data['MACHINE_EFFICIENCY'],
        data['MACHINE_REAL_PRODUCTIVE_TIME'],
        data['MACHINE_VALUE_PRODUCTIVE_TIME'],
        machine_id
    )
    cursor.execute(update_query, values)

conn.commit()
cursor.close()
conn.close()

print("Database update complete.")

for machine_id, result in results.items():
    print(f"{machine_id}: {result}")
