DROP DATABASE IF EXISTS smartfactoryDB;
CREATE DATABASE smartfactoryDB;
USE smartfactoryDB;

DROP TABLE IF EXISTS plmTBL;
CREATE TABLE plmTBL
(   
   CODE char(7) NOT NULL PRIMARY KEY
);

ALTER TABLE plmtbl ADD COLUMN PLM_TOTAL_INPUT INT NOT NULL;
ALTER TABLE plmtbl ADD COLUMN PLM_TOTAL_TRUE INT NOT NULL;
ALTER TABLE plmtbl ADD COLUMN PLM_TOTAL_FAIL INT NOT NULL;

DROP TABLE IF EXISTS productTBL;
CREATE TABLE productTBL
(   LOT CHAR(11) NOT NULL,
    CODE CHAR(7) NOT NULL,
    SERIAL CHAR(16) NOT NULL UNIQUE,
    PRIMARY KEY(LOT, CODE, SERIAL),
    FOREIGN KEY(CODE) REFERENCES plmTBL(CODE) ON DELETE CASCADE ON UPDATE CASCADE
);

DROP TABLE IF EXISTS processTBL;
CREATE TABLE processTBL
(   PROCESS_CODE CHAR(10) NOT NULL,
    PRODUCT_CODE CHAR(7) NOT NULL,
    STANDARD_TIME INT NOT NULL,
    CYCLE_TIME INT NOT NULL,
    PRIMARY KEY(PROCESS_CODE, PRODUCT_CODE),
    FOREIGN KEY(PRODUCT_CODE) REFERENCES plmTBL(CODE) ON DELETE CASCADE ON UPDATE CASCADE
);

DROP TABLE IF EXISTS operatorTBL;
CREATE TABLE operatorTBL
(   OPERATOR_ID CHAR(10) NOT NULL PRIMARY KEY,
    OPERATOR_NAME CHAR(30) NOT NULL,
    OPERATOR_TOTAL_WORKING_TIME INT NOT NULL,
    OPERATOR_TOTAL_PRODUCTIVE_TIME INT NOT NULL,
    OPERATOR_TOTAL_INPUT INT NOT NULL,
    OPERATOR_TOTAL_FAIL INT NOT NULL,
    OPERATOR_PERFORMANCE INT NOT NULL,
    OPERATOR_EFFICIENCY DOUBLE NOT NULL,
    OPERATOR_LEVEL INT NOT NULL
);

DROP TABLE IF EXISTS machineTBL;
CREATE TABLE machineTBL
(   MACHINE_ID CHAR(10) NOT NULL PRIMARY KEY,
    MACHINE_TOTAL_WORKING_TIME INT NOT NULL,
    MACHINE_TOTAL_PRODUCTIVE_TIME INT NOT NULL,
    MACHINE_TOTAL_INPUT INT NOT NULL,
    MACHINE_TOTAL_FAIL INT NOT NULL,
    MACHINE_PERFORMANCE INT NOT NULL,
    MACHINE_EFFICIENCY DOUBLE NOT NULL
);

ALTER TABLE machinetbl ADD COLUMN MACHINE_REAL_PRODUCTIVE_TIME INT NOT NULL;
ALTER TABLE machinetbl ADD COLUMN MACHINE_VALUE_PRODUCTIVE_TIME INT NOT NULL;

DROP TABLE IF EXISTS eventTBL;
CREATE TABLE eventTBL (
    `INDEX` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    TIME DATETIME NOT NULL,
    PROCESS CHAR(10) NOT NULL,
    ID CHAR(10) NOT NULL,
    TYPE CHAR(4) NOT NULL,
    LOT CHAR(11) NOT NULL,
    CODE CHAR(7) NOT NULL,
    SERIAL CHAR(16) NOT NULL,
    PASS CHAR(7) NULL,
    
    FOREIGN KEY(PROCESS) REFERENCES processTBL(PROCESS_CODE) ON DELETE CASCADE ON UPDATE CASCADE,
    #FOREIGN KEY(ID) REFERENCES operatorTBL(OPERATOR_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    #FOREIGN KEY(ID) REFERENCES machineTBL(MACHINE_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(LOT) REFERENCES productTBL(LOT) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(CODE) REFERENCES plmTBL(CODE) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(SERIAL) REFERENCES productTBL(SERIAL) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 트리거 정의: eventTBL에 삽입 전에 ID가 유효한지 확인
DELIMITER $$

CREATE TRIGGER check_valid_id BEFORE INSERT ON eventTBL
FOR EACH ROW
BEGIN
    -- ID가 operatorTBL에 있거나 machineTBL에 있어야 함
    IF NOT EXISTS (SELECT 1 FROM operatorTBL WHERE OPERATOR_ID = NEW.ID) AND
       NOT EXISTS (SELECT 1 FROM machineTBL WHERE MACHINE_ID = NEW.ID) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid ID: Must exist in either operatorTBL or machineTBL';
    END IF;
END $$

DELIMITER ;
